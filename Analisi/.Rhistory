geom_line(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart-L2Start+1, y = Input.Voltage),
color= "black") +
labs(title = "Grafico del voltaggio nel Tempo (Input voltaggio inverter HotLap 2)",
x = "Tempo (s)",
y = "Voltaggio (v)")+
scale_y_continuous(breaks = seq(0, max(InverterInputVoltage_HotLap2$Input.Voltage), by = 2))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")
Plot_Voltaggio_Inverter_In_L2
linearModel_InverterVoltage_L2 <- lm(Input.Voltage ~ TimeFromStart,
data = InverterInputVoltage_HotLap2)
# summary(logModel_EngineTemps_L2) ...
#InverterInputVoltage_HotLap2$Input.Voltage
#CoolingCircuitTemps_HotLap2$Engine.Output
Correlazione_L2 <- ggplot(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage)) +
geom_line(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage),
color = "red") +
geom_line(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Engine.Output + 500),
color = "blue") +
labs(title = "Confronto temperatura e voltaggio",
x = "Tempo (s)",
y = "") +
scale_y_continuous(breaks = seq(0, max(InverterInputVoltage_HotLap2$Input.Voltage))) +
geom_smooth(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Engine.Output + 500),
method = "lm", formula = y ~ x, color = "blue") +
geom_smooth(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage),
method = "lm", formula = y ~ x, color = "red")
Correlazione_L2
linearModel_InverterVoltage_L2 <- lm(Input.Voltage ~ TimeFromStart,
data = InverterInputVoltage_HotLap2)
linearModel_EngineTemps_L2 <- lm(Engine.Output ~ TimeFromStart,
data = CoolingCircuitTemps_HotLap2)
linearModel_InverterVoltage_L2
linearModel_EngineTemps_L2
## Seleziona solo i dati che hanno la stessa lunghezza in entrambi i vettori (troncamento)
shorter_length <- min(length(InverterInputVoltage_HotLap2$Input.Voltage), length(CoolingCircuitTemps_HotLap2$Engine.Output))
subset_Inverter <- InverterInputVoltage_HotLap2$Input.Voltage[1:shorter_length]
subset_Cooling <- CoolingCircuitTemps_HotLap2$Engine.Output[1:shorter_length]
## Calcola la correlazione tra i vettori
correlation_test_result <- cor.test(subset_Inverter, subset_Cooling)
correlation_test_result
## Dataset primari
CoolingCircuitTemps_R1 <- read.csv("../Analisi/Run1/CoolingCircuitTemperatures.csv")
LVTemps_R1<- read.csv("../Analisi/Run1/LVTemperatures.csv")
AccumulatorCellsTemps_R1 <-read.csv("../Analisi/Run1/AccumulatorCellsTemperatures.csv")
Power_R1<- read.csv("../Analisi/Run1/Power.csv")
InverterCurrents_R1 <-read.csv("../Analisi/Run1/InverterCurrents.csv")
InverterInputVoltage_R1 <-read.csv("../Analisi/Run1/InverterInputVoltage.csv")
## Collateriali
Speed_R1<- read.csv("../Analisi/Run1/Speed.csv")
Throttle_R1 <-read.csv("../Analisi/Run1/Throttle.csv")
Voltage_R1 <- read.csv("../Analisi/Run1/Voltage.csv")
## filtra i null
CoolingCircuitTemps_R1 <- na.omit(CoolingCircuitTemps_R1)
LVTemps_R1 <- na.omit(LVTemps_R1)
## Non filtro AccumulatorCellsTemps_R1: troppo noise
Speed_R1 <-na.omit(Speed_R1)
Voltage_R1 <-na.omit(Voltage_R1)
Power_R1 <-na.omit(Power_R1)
Throttle_R1 <-na.omit(Throttle_R1)
InverterCurrents_R1 <-na.omit(InverterCurrents_R1)
InverterInputVoltage_R1 <-na.omit(InverterInputVoltage_R1)
## Tempo 0: accensione sensori
T0= min(LVTemps_R1$Time)
CoolingCircuitTemps_R1$TimeFromStart <- (CoolingCircuitTemps_R1$Time - T0) /1000
LVTemps_R1$TimeFromStart <- (LVTemps_R1$Time - T0) /1000
AccumulatorCellsTemps_R1$TimeFromStart <- (AccumulatorCellsTemps_R1$Time - T0) /1000
Speed_R1$TimeFromStart <- (Speed_R1$Time - T0) /1000
Voltage_R1$TimeFromStart <- (Voltage_R1$Time - T0) /1000
Power_R1$TimeFromStart <- (Power_R1$Time - T0) /1000
Throttle_R1$TimeFromStart <- (Throttle_R1$Time - T0) /1000
InverterCurrents_R1$TimeFromStart <- (InverterCurrents_R1$Time - T0) /1000
InverterInputVoltage_R1$TimeFromStart <- (InverterInputVoltage_R1$Time - T0) /1000
library(ggplot2)
## average delle temperature dell'accumulator
## media dei dati che ci sono
AccumulatorCellsTemps_R1$MeanTemperature <-
rowMeans(AccumulatorCellsTemps_R1[, c( "Thermometer.0",
"Thermometer.1",
"Thermometer.2",
"Thermometer.3",
"Thermometer.4",
"Thermometer.5",
"Thermometer.6",
"Thermometer.7")],
na.rm = TRUE, dims = 1)
# Sostituisci "NaN" con NA nelle colonne specificate
AccumulatorCellsTemps_R1[AccumulatorCellsTemps_R1 == "NaN"] <- NA
## Tempistiche, ricavate d aanalisi "Speed"
T1=40   ## inizio attempt 1
T2=157  ## fine attempt 1
T3=340
T4=456
L1Start= 51
L1Finish= 140
L2Start= 353
L2Finish= 440
## Crea il grafico
speed <-
ggplot(data = Speed_R1, aes(x = TimeFromStart, y = Speed)) +
geom_line() +
labs(title = "Grafico della velocità",
x = "Tempo(s)",
y = "Velocità (kmh)")+
## scala ogni 20 sec
scale_x_continuous(breaks = seq(0, max(Speed_R1$TimeFromStart), by = 20))+
## Aggiungi linee verticali alle parti interesanti
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "red")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "blue")
speed
## Grafico delle temperature
Plot_Temperature_R1 <- ggplot() +
labs(title = "Grafico delle Temperature nel Tempo (Run completa)",
x = "Tempo (s)",
y = "Temperatura (C)")+
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 20))+
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 2))+
geom_line(data = LVTemps_R1,
aes(x = TimeFromStart, y = temperature),
color = "blue") +
geom_line(data = CoolingCircuitTemps_R1,
aes(x = TimeFromStart, y = Inverter.Output),
color = "red") +
geom_line(data = CoolingCircuitTemps_R1,
aes(x = TimeFromStart, y = Engine.Output),
color = "black") +
geom_line(data = AccumulatorCellsTemps_R1,
aes(x = TimeFromStart, y = MeanTemperature),
color = "green") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Temperature_R1
Plot_Temperature_batteria_R1 <- ggplot() +
labs(title = "Grafico delle Temperature nel Tempo (Batteria circuito raffreddamento run completa)",
x = "Tempo (s)",
y = "Temperatura (C)")+
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 20))+
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 2))+
geom_line(data = LVTemps_R1,
aes(x = TimeFromStart, y = temperature),
color = "blue") +
geom_line(data = Voltage_R1,
aes(x = TimeFromStart, y = voltage),
color = "red") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Temperature_batteria_R1
Plot_Temperature_accumulator_R1 <- ggplot() +
labs(title = "Grafico delle Temperature nel Tempo (Accumulator run completa)",
x = "Tempo (s)",
y = "Temperatura (C)")+
geom_point(data = AccumulatorCellsTemps_R1,
aes(x = TimeFromStart, y = MeanTemperature, group = 1),
color = "blue") +
geom_point(data = AccumulatorCellsTemps_R1,
aes(x = TimeFromStart, y = Thermometer.4, group = 1),
color = "red") +
geom_vline(xintercept = c(T1, T2, T3, T4), linetype = "dashed", color = "grey") +
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Temperature_accumulator_R1
AccumulatorCellsTemps_Attempt1 <- AccumulatorCellsTemps_R1[AccumulatorCellsTemps_R1$TimeFromStart >= L1Start
& AccumulatorCellsTemps_R1$TimeFromStart <= L1Finish, ]
AccumulatorCellsTemps_Attempt1 <-na.omit(AccumulatorCellsTemps_Attempt1)
Plot_AccumulatorCellsTemps_L1 <-
ggplot( data = AccumulatorCellsTemps_Attempt1,
aes(x = TimeFromStart, y = MeanTemperature)) +
geom_line(data = AccumulatorCellsTemps_Attempt1,
aes(x = TimeFromStart, y = MeanTemperature),
color = "black") +
labs(title = "Grafico delle Temperature nel Tempo (Batteria HotLap 1)",
x = "Tempo (s)",
y = "Temperatura (C)") +
geom_smooth(method = "lm", color = "red")
Plot_AccumulatorCellsTemps_L1
AccumulatorCellsTemps_Attempt2 <- AccumulatorCellsTemps_R1[AccumulatorCellsTemps_R1$TimeFromStart >= L2Start
& AccumulatorCellsTemps_R1$TimeFromStart <= L2Finish, ]
AccumulatorCellsTemps_Attempt2 <-na.omit(AccumulatorCellsTemps_Attempt2)
Plot_AccumulatorCellsTemps_L2 <-
ggplot( data = AccumulatorCellsTemps_Attempt2,
aes(x = TimeFromStart, y = MeanTemperature)) +
geom_line(data = AccumulatorCellsTemps_Attempt2,
aes(x = TimeFromStart, y = MeanTemperature),
color = "black") +
labs(title = "Grafico delle Temperature nel Tempo (Batteria HotLap 2)",
x = "Tempo (s)",
y = "Temperatura (C)") +
geom_smooth(method = "lm", color = "red")
Plot_AccumulatorCellsTemps_L2
linearModel_AccumulatorCellsTemps_L2 <- lm(MeanTemperature ~ TimeFromStart,
data = AccumulatorCellsTemps_Attempt2)
linearModel_AccumulatorCellsTemps_L2
LVTemps_Attempt1 <- LVTemps_R1[LVTemps_R1$TimeFromStart >= L1Start & LVTemps_R1$TimeFromStart <= L1Finish, ]
# Crea il grafico HotLap1 con regressione lineare
Plot_LVTemps_L1 <-
ggplot( data = LVTemps_Attempt1,
aes(x = TimeFromStart, y = temperature)) +
geom_line(data = LVTemps_Attempt1,
aes(x = TimeFromStart, y = temperature),
color = "blue") +
labs(title = "Grafico delle Temperature nel Tempo (Batteria circuito raffreddamento HotLap 1)",
x = "Tempo (s)",
y = "Temperatura (C)") +
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 20)) +
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 2)) +
geom_smooth(method = "lm", color = "red")
Plot_LVTemps_L1
# eliminare outliers(?)
# tentativo naive
qqnorm(LVTemps_Attempt1$temperature)## outliers "bassi"
LVTemps_Attempt1$z_score <- scale(LVTemps_Attempt1$temperature)
threshold_down <- 0.3
threshold_up <- 0.6
## metodo "buono"
#LVTemps_Attempt1 <- LVTemps_Attempt1[LVTemps_Attempt1$z_score >= threshold_down &
#                                     LVTemps_Attempt1$z_score <= threshold_up,
#                                    ]
## metodo cattivo
LVTemps_Attempt1 <- LVTemps_Attempt1[LVTemps_Attempt1$temperature > 38, ]
qqnorm(LVTemps_Attempt1$temperature)## credo sia ok con le threshold selezionate...(grafico a "S" tipico di funzione in crescita lin.)
# grafico senza outlier
ggplot(data = LVTemps_Attempt1, aes(x = TimeFromStart, y = temperature)) +
geom_line() +
labs(title = "Grafico delle Temperature nel Tempo (Batteria circuito raffreddamento HotLap 1, dati 'filtrati')",
x = "Tempo (s)",
y = "Temperatura (°C)") +
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 5))+
geom_smooth(method = "lm", color = "red")
LVTemps_Attempt2 <- LVTemps_R1[LVTemps_R1$TimeFromStart >= L2Start & LVTemps_R1$TimeFromStart <= L2Finish, ]
# Crea il grafico HotLap1 con regressione lineare
Plot_LVTemps_L2 <-
ggplot( data = LVTemps_Attempt2,
aes(x = TimeFromStart, y = temperature)) +
geom_line(data = LVTemps_Attempt2,
aes(x = TimeFromStart, y = temperature),
color = "blue") +
labs(title = "Grafico delle Temperature nel Tempo (Batteria circuito raffreddamento HotLap 2)",
x = "Tempo (s)",
y = "Temperatura (C)") +
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 20)) +
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 2)) +
geom_smooth(method = "lm", color = "red")
Plot_LVTemps_L2
# eliminare outliers(?)
# tentativo naive
qqnorm(LVTemps_Attempt2$temperature)## outliers "bassi"
LVTemps_Attempt2$z_score <- scale(LVTemps_Attempt2$temperature)
## metodo "cattivo"
LVTemps_Attempt2 <- LVTemps_Attempt2[LVTemps_Attempt2$temperature > 40, ]
qqnorm(LVTemps_Attempt2$temperature)## credo sia ok con le threshold selezionate...(grafico a "S" tipico di funzione in crescita lin.)
# grafico senza outlier
ggplot(data = LVTemps_Attempt2, aes(x = TimeFromStart, y = temperature)) +
geom_line() +
labs(title = "Grafico delle Temperature nel Tempo (Batteria HotLap circuito raffreddamento 2, dati 'filtrati')",
x = "Tempo (s)",
y = "Temperatura (°C)") +
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 5))+
geom_smooth(method = "lm", color = "red")
LVTemps_Pause <- LVTemps_R1[  LVTemps_R1$TimeFromStart >= T2 &
LVTemps_R1$TimeFromStart <= T3, ]
# Crea il grafico
ggplot(data = LVTemps_Pause, aes(x = TimeFromStart, y = temperature)) +
geom_line() +
labs(title = "Grafico delle Temperature nel Tempo (batteria circuito raffreddamento pausa)",
x = "Tempo(s)",
y = "Temperatura (°C)")+
# scala ogni 20 sec
scale_x_continuous(breaks = seq(0, max(LVTemps_R1$TimeFromStart), by = 10)) +
geom_smooth(method = "lm", color = "red")
# estrarre coefficenti retta di previsione
linearModel_LVTemps_Pause <- lm(temperature ~ TimeFromStart, data = LVTemps_Pause)
# summary(linearModel_LVTemps_Pause) ...
Plot_Temperature_motore_R1 <- ggplot() +
labs(title = "Grafico delle Temperature nel Tempo (Motore run completa)",
x = "Tempo (s)",
y = "Temperatura (C)")+
scale_x_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$TimeFromStart), by = 20))+
scale_y_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$Engine.Output), by = 2))+
geom_line(data = CoolingCircuitTemps_R1,
aes(x = TimeFromStart, y = Engine.Output),
color = "black") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Temperature_motore_R1
CoolingCircuitTemps_HotLap2 <- CoolingCircuitTemps_R1[
CoolingCircuitTemps_R1$TimeFromStart >= L2Start &
CoolingCircuitTemps_R1$TimeFromStart <= L2Finish, ]
# Crea il grafico HotLap2
Plot_Temperature_motore_L2 <-
ggplot( data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart-L2Start+1, y = Engine.Output))+
geom_line(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart-L2Start+1, y = Engine.Output),
color= "black") +
labs(title = "Grafico delle Temperature nel Tempo (Motore HotLap Attempt 2)",
x = "Tempo HotLap (s)",
y = "Temperatura (°C)")+
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 1))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")+
geom_smooth(method = "lm", formula = y ~ log(x), color = "blue")
Plot_Temperature_motore_L2
linearModel_EngineTemps_L2 <- lm(Engine.Output ~ TimeFromStart,
data = CoolingCircuitTemps_HotLap2)
logModel_EngineTemps_L2 <- lm(Engine.Output ~ log(TimeFromStart - L2Start + 1),
data = CoolingCircuitTemps_HotLap2)
# summary(logModel_EngineTemps_L2) ...
CoolingCircuitTemps_Pause <- CoolingCircuitTemps_R1[
CoolingCircuitTemps_R1$TimeFromStart >= T2 &
CoolingCircuitTemps_R1$TimeFromStart <= T3, ]
# Crea il grafico Pausa
Plot_Temperature_motore_Pause <-
ggplot( data = CoolingCircuitTemps_Pause,
aes(x = TimeFromStart, y = Engine.Output))+
geom_line(data = CoolingCircuitTemps_Pause,
aes(x = TimeFromStart, y = Engine.Output),
color= "black") +
labs(title = "Grafico delle Temperature nel Tempo (Motore Pausa)",
x = "Tempo HotLap (s)",
y = "Temperatura (°C)")+
scale_y_continuous(breaks = seq(0, max(LVTemps_R1$temperature), by = 0.1))+
scale_x_continuous(breaks = seq(
min(LVTemps_R1$TimeFromStart),
max(LVTemps_R1$TimeFromStart), by = 20))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")
linearModel_EngineTemps_Pause <- lm(Engine.Output ~ TimeFromStart,
data = CoolingCircuitTemps_Pause)
summary(linearModel_EngineTemps_Pause)
Plot_Temperature_motore_Pause
Plot_Temperature_inverter_R1 <- ggplot() +
labs(title = "Grafico delle Temperature nel Tempo (Inverter run completa)",
x = "Tempo (s)",
y = "Temperatura (C)")+
scale_x_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$TimeFromStart), by = 20))+
scale_y_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$Inverter.Output), by = 2))+
geom_line(data = CoolingCircuitTemps_R1,
aes(x = TimeFromStart, y = Inverter.Output),
color = "red") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Temperature_inverter_R1
CoolingCircuitTemps_HotLap1 <- CoolingCircuitTemps_R1[
CoolingCircuitTemps_R1$TimeFromStart >= L1Start &
CoolingCircuitTemps_R1$TimeFromStart <= L1Finish, ]
# Crea il grafico HotLap2
Plot_Temperature_inverter_L1 <-
ggplot( data = CoolingCircuitTemps_HotLap1,
aes(x = TimeFromStart, y = Inverter.Output))+
geom_line(data = CoolingCircuitTemps_HotLap1,
aes(x = TimeFromStart, y = Inverter.Output),
color= "black") +
labs(title = "Grafico delle Temperature nel Tempo (Inverter HotLap 1)",
x = "Tempo HotLap (s)",
y = "Temperatura (°C)")+
scale_y_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$Inverter.Output), by = 1))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")+
geom_smooth(method = "lm", formula = y ~ log(x), color = "blue")
Plot_Temperature_inverter_L1
linearModel_InverterTemps_L1 <- lm(Inverter.Output ~ TimeFromStart,
data = CoolingCircuitTemps_HotLap1)
logModel_InverterTemps_L1 <- lm(Inverter.Output ~ log(TimeFromStart - L1Start + 1),
data = CoolingCircuitTemps_HotLap1)
summary(linearModel_InverterTemps_L1)
summary(logModel_InverterTemps_L1)
CoolingCircuitTemps_HotLap2 <- CoolingCircuitTemps_R1[
CoolingCircuitTemps_R1$TimeFromStart >= L2Start &
CoolingCircuitTemps_R1$TimeFromStart <= L2Finish, ]
# Crea il grafico HotLap2
Plot_Temperature_inverter_L2 <-
ggplot( data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart, y = Inverter.Output))+
geom_line(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart, y = Inverter.Output),
color= "black") +
labs(title = "Grafico delle Temperature nel Tempo (Inverter HotLap 2)",
x = "Tempo HotLap (s)",
y = "Temperatura (°C)")+
scale_y_continuous(breaks = seq(0, max(CoolingCircuitTemps_R1$Inverter.Output), by = 1))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")
Plot_Temperature_inverter_L2
linearModel_InverterTemps_L2 <- lm(Inverter.Output ~ TimeFromStart,
data = CoolingCircuitTemps_HotLap2)
summary(linearModel_InverterTemps_L2)
CoolingCircuitTemps_Pause <- CoolingCircuitTemps_R1[
CoolingCircuitTemps_R1$TimeFromStart >= T2 &
CoolingCircuitTemps_R1$TimeFromStart <= T3, ]
# Crea il grafico Pausa
Plot_Temperature_inverter_Pause <-
ggplot( data = CoolingCircuitTemps_Pause,
aes(x = TimeFromStart, y = Inverter.Output))+
geom_line(data = CoolingCircuitTemps_Pause,
aes(x = TimeFromStart, y = Inverter.Output),
color= "black") +
labs(title = "Grafico delle Temperature nel Tempo (Inverter Pausa)",
x = "Tempo HotLap (s)",
y = "Temperatura (°C)")+
scale_y_continuous(breaks = seq(0, max(CoolingCircuitTemps_Pause$Inverter.Output), by = 0.1))+
scale_x_continuous(breaks = seq(
min(CoolingCircuitTemps_Pause$TimeFromStart),
max(CoolingCircuitTemps_Pause$TimeFromStart), by = 20))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")
linearModel_InverterTemps_Pause <- lm(Inverter.Output ~ TimeFromStart,
data = CoolingCircuitTemps_Pause)
summary(linearModel_InverterTemps_Pause)
Plot_Temperature_inverter_Pause
Plot_Power_R1 <- ggplot() +
labs(title = "Grafico della potenza nel tempo",
x = "Tempo (s)",
y = "Potenza (W)")+
geom_line(data = Power_R1,
aes(x = TimeFromStart, y = DC.Power),
color = "blue") +
geom_line(data = Power_R1,
aes(x = TimeFromStart, y = AC.Power),
color = "red") +
geom_line(data = Throttle_R1,
aes(x = TimeFromStart, y = Throttle_R1$ThrottlePosition.mean*1000),
color = "grey") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_Power_R1
Plot_InverterCurrents_R1 <- ggplot() +
labs(title = "Grafico Amperaggio nel tempo",
x = "Tempo (s)",
y = "Ampere (A)")+
geom_line(data = InverterCurrents_R1,
aes(x = TimeFromStart, y = DC.Current),
color = "blue") +
geom_line(data = InverterCurrents_R1,
aes(x = TimeFromStart, y = AC.Current),
color = "red") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_InverterCurrents_R1
## delta: calcola efficenza nel tempo
InverterCurrents_R1$delta.ACDC <- (InverterCurrents_R1$AC.Current - InverterCurrents_R1$DC.Current)
Plot_InverterCurrents_R1 <- ggplot() +
labs(title = "Differenza AC - DC ",
x = "Tempo (s)",
y = "Potenza (W)")+
geom_line(data = InverterCurrents_R1,
aes(x = TimeFromStart, y = delta.ACDC),
color = "black") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_InverterCurrents_R1
Plot_InverterInputVoltage_R1 <- ggplot() +
labs(title = "Grafico del voltaggio in input nell'inverter nel tempo (Run comppleta)",
x = "Tempo (s)",
y = "Voltaggio (V)")+
geom_line(data = InverterInputVoltage_R1,
aes(x = TimeFromStart, y = InverterInputVoltage_R1$Input.Voltage),
color = "blue") +
geom_vline(xintercept = c(T1, T2, T3,T4), linetype = "dashed", color = "grey")+
geom_vline(xintercept = c(L1Start, L1Finish, L2Start, L2Finish), linetype = "dashed", color = "grey")
Plot_InverterInputVoltage_R1
InverterInputVoltage_HotLap2 <- InverterInputVoltage_R1[
InverterInputVoltage_R1$TimeFromStart >= L2Start &
InverterInputVoltage_R1$TimeFromStart <= L2Finish, ]
# Crea il grafico HotLap2
Plot_Voltaggio_Inverter_In_L2 <-
ggplot( data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart-L2Start+1, y = Input.Voltage))+
geom_line(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart-L2Start+1, y = Input.Voltage),
color= "black") +
labs(title = "Grafico del voltaggio nel Tempo (Input voltaggio inverter HotLap 2)",
x = "Tempo (s)",
y = "Voltaggio (v)")+
scale_y_continuous(breaks = seq(0, max(InverterInputVoltage_HotLap2$Input.Voltage), by = 2))+
geom_smooth(method = "lm", formula = y ~ x, color = "red")
Plot_Voltaggio_Inverter_In_L2
linearModel_InverterVoltage_L2 <- lm(Input.Voltage ~ TimeFromStart,
data = InverterInputVoltage_HotLap2)
# summary(logModel_EngineTemps_L2) ...
#InverterInputVoltage_HotLap2$Input.Voltage
#CoolingCircuitTemps_HotLap2$Engine.Output
Correlazione_L2 <- ggplot(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage)) +
geom_line(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage),
color = "red") +
geom_line(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Engine.Output + 500),
color = "blue") +
labs(title = "Confronto temperatura e voltaggio",
x = "Tempo (s)",
y = "") +
scale_y_continuous(breaks = seq(0, max(InverterInputVoltage_HotLap2$Input.Voltage))) +
geom_smooth(data = CoolingCircuitTemps_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Engine.Output + 500),
method = "lm", formula = y ~ x, color = "blue") +
geom_smooth(data = InverterInputVoltage_HotLap2,
aes(x = TimeFromStart - L2Start + 1, y = Input.Voltage),
method = "lm", formula = y ~ x, color = "red")
Correlazione_L2
linearModel_InverterVoltage_L2 <- lm(Input.Voltage ~ TimeFromStart,
data = InverterInputVoltage_HotLap2)
linearModel_EngineTemps_L2 <- lm(Engine.Output ~ TimeFromStart,
data = CoolingCircuitTemps_HotLap2)
linearModel_InverterVoltage_L2
linearModel_EngineTemps_L2
## Seleziona solo i dati che hanno la stessa lunghezza in entrambi i vettori (troncamento)
shorter_length <- min(length(InverterInputVoltage_HotLap2$Input.Voltage), length(CoolingCircuitTemps_HotLap2$Engine.Output))
subset_Inverter <- InverterInputVoltage_HotLap2$Input.Voltage[1:shorter_length]
subset_Cooling <- CoolingCircuitTemps_HotLap2$Engine.Output[1:shorter_length]
## Calcola la correlazione tra i vettori
correlation_test_result <- cor.test(subset_Inverter, subset_Cooling)
correlation_test_result
